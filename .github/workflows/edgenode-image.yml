---

name: Edgenode Image Pipeline

on:
  push:

env:
  REGISTRY: ghcr.io

jobs:
  framework-image-build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        flavor:
        - alpine
        - ubuntu
        os:
        - linux
        arch:
        - amd64
        - arm64
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set Image Base Name
        run: |
          echo "IMAGE_NAME=framework-${{ matrix.flavor }}-${{ matrix.arch }}" >> $GITHUB_ENV
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          buildkitd-flags: --debug
          driver-opts: image=moby/buildkit:buildx-stable-1
      
      - name: Login to the Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}
          tags: |
            type=schedule
            type=semver,pattern=v{{version}}
            type=semver,pattern=v{{major}}.{{minor}}
            type=semver,pattern=v{{major}}
            type=ref,event=branch
            type=ref,event=pr
            type=sha
            type=sha,prefix=,format=long

      # TODO: Also sign images with cosign
      - name: Build and push Framework image
        uses: docker/build-push-action@v3
        with:
          file: framework/Dockerfile.${{ matrix.flavor }}
          context: ""
          platforms: ${{ matrix.os }}/${{ matrix.arch }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Save framework image tags as artifact
        run: |
          cat <<EOF > ${{ env.IMAGE_NAME }}-oci.txt
          ${{ steps.meta.outputs.tags }}
          EOF

      - name: Export Artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.IMAGE_NAME }}-oci
          path: "*-oci.txt"

  edgenode-image-build:
    runs-on: ubuntu-latest
    needs: framework-image-build
    strategy:
      fail-fast: false
      matrix:
        flavor:
        - alpine
        - alpine-arm-rpi
        - ubuntu
        - ubuntu-arm-rpi
        os:
        - linux
        arch:
        - amd64
        - arm64
        exclude:
        - flavor: alpine-arm-rpi
          arch: amd64
        - flavor: ubuntu-arm-rpi
          arch: amd64

        # TODO: temporary excludes until more work is done to build arm64 ubuntu images
        - flavor: ubuntu
          arch: arm64
        - flavor: ubuntu-arm-rpi
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set image base name
        run: |
          echo "IMAGE_NAME=edgenode-${{ matrix.flavor }}-${{ matrix.arch }}" >> $GITHUB_ENV
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          buildkitd-flags: --debug
          driver-opts: image=moby/buildkit:buildx-stable-1
      
      - name: Login to the Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
          tags: |
            type=schedule
            type=semver,pattern=v{{version}}
            type=semver,pattern=v{{major}}.{{minor}}
            type=semver,pattern=v{{major}}
            type=ref,event=branch
            type=ref,event=pr
            type=sha

      # TODO: Also sign images with cosign
      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          file: images/Dockerfile.${{ matrix.flavor }}
          context: ""
          platforms: ${{ matrix.os }}/${{ matrix.arch }}
          push: true
          tags: |
            ${{ steps.meta.outputs.tags }}
          labels: |
            ${{ steps.meta.outputs.labels }}
          build-args: |
            TARGETOS=${{ matrix.os }}
            TARGETARCH=${{ matrix.arch }}
            FRAMEWORK_IMAGE_TAG=${{ github.sha }}

      - name: Save image tags as artifact
        run: |
          cat <<EOF > ${{ env.IMAGE_NAME }}-oci.txt
          ${{ steps.meta.outputs.tags }}
          EOF

      - name: Export Artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.IMAGE_NAME }}-oci
          path: "*-oci.txt"

  edgenode-image-iso:
    runs-on: ubuntu-latest
    needs: edgenode-image-build
    strategy:
      fail-fast: false
      matrix:
        flavor:
        - alpine
        - ubuntu
        arch:
        - amd64
        - arm64
        exclude:
        - flavor: ubuntu
          arch: arm64
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          buildkitd-flags: --debug
          driver-opts: image=moby/buildkit:buildx-stable-1

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v2
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/edgenode-${{ matrix.flavor }}-${{ matrix.arch }}
          tags: |
            type=sha
      
      - name: Pull Image
        run: |
          docker pull ${{ steps.meta.outputs.tags }}
          docker pull quay.io/kairos/packages${{ (matrix.arch == 'arm64') && '-arm64' || '' }}:grub2-efi-image-livecd-0.0.2-3
          docker pull quay.io/kairos/packages${{ (matrix.arch == 'arm64') && '-arm64' || '' }}:grub2-livecd-0.0.3-2

      - name: Configure ISO manifest
        run: |
          cat <<EOF > manifest.yaml
          name: "edgenode-${{ matrix.flavor }}-${{ matrix.arch }}"
          arch: "${{ (matrix.arch == 'amd64') && 'x86_64' || matrix.arch }}"
          debug: true

          iso:
            # Packages to be installed in the rootfs
            rootfs:
            - docker:${{ steps.meta.outputs.tags }}
            # Packages to be installed in the uefi image
            uefi:
            # - docker:quay.io/kairos/packages${{ (matrix.arch == 'arm64') && '-arm64' || '' }}:grub2-efi-image-livecd-0.0.2-3
            - channel:live/grub2-efi-image
            # Packages to be installed in the iso image
            image:
            # - docker:quay.io/kairos/packages${{ (matrix.arch == 'arm64') && '-arm64' || '' }}:grub2-efi-image-livecd-0.0.2-3
            # - docker:quay.io/kairos/packages${{ (matrix.arch == 'arm64') && '-arm64' || '' }}:grub2-livecd-0.0.3-2
            - channel:live/grub2-efi-image
            - channel:live/grub2
            - dir:/cOS/overlay/files-iso
            label: "COS_LIVE"
            
          repositories:
            - uri: quay.io/costoolkit/releases-teal${{ (matrix.arch == 'arm64') && '-arm64' || '' }}
              arch: ${{ (matrix.arch == 'amd64') && 'x86_64' || matrix.arch }}
          EOF

      - name: Build ISO
        run: |
          docker run -v $PWD:/cOS -v /var/run/docker.sock:/var/run/docker.sock -i --rm --entrypoint=/usr/bin/elemental quay.io/kairos/osbuilder-tools:v0.1.1 --config-dir=/cOS/ build-iso --date=false --local --output /cOS/

      - name: Export Artifact
        uses: actions/upload-artifact@v3
        with:
          name: edgenode-${{ matrix.flavor }}-${{ matrix.arch }}-iso
          path: "*.iso"

  edgenode-image-release:
    runs-on: ubuntu-latest
    needs:
    - edgenode-image-build
    - edgenode-image-iso
    if: startsWith(github.event.ref, 'refs/tags/v')
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - uses: actions/download-artifact@v3
        id: download

      - uses: xresloader/upload-to-github-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          file: "edgenode-*/*"
          overwrite: true
          update_latest_release: true
          tags: true